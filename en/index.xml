<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kend&#39;s Blog</title>
    <link>https://iendi.github.io/en/</link>
    <description>Recent content on Kend&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 27 Jun 2024 11:49:48 +0800</lastBuildDate>
    <atom:link href="https://iendi.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dashboard</title>
      <link>https://iendi.github.io/en/posts/tech/%E4%B8%AD%E9%97%B4%E4%BB%B6/dashboard/</link>
      <pubDate>Thu, 27 Jun 2024 11:49:48 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/%E4%B8%AD%E9%97%B4%E4%BB%B6/dashboard/</guid>
      <description></description>
    </item>
    <item>
      <title>K8s</title>
      <link>https://iendi.github.io/en/posts/tech/%E4%B8%AD%E9%97%B4%E4%BB%B6/k8s/</link>
      <pubDate>Tue, 18 Jun 2024 22:15:18 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/%E4%B8%AD%E9%97%B4%E4%BB%B6/k8s/</guid>
      <description>基本组件 Cluster 基本组成 通过kubectl，对控制平面进行操作 输入kubelctl apply -f xxx.yaml后，发生了什么？ 首先通过HTTP请求，发送至</description>
    </item>
    <item>
      <title>BFS搜索</title>
      <link>https://iendi.github.io/en/posts/lc/%E5%9B%BE/bfs/</link>
      <pubDate>Mon, 13 May 2024 15:40:28 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E5%9B%BE/bfs/</guid>
      <description>回溯做了一星期，都是用dfs，今天刚好每日一题是bfs 994. 腐烂的橘子 - 力扣（LeetCode） m x n 网格 grid 中： 值 0 代表空单元格； 值 1 代表新鲜橘</description>
    </item>
    <item>
      <title>Docker 基本知识</title>
      <link>https://iendi.github.io/en/posts/tech/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/</link>
      <pubDate>Tue, 30 Apr 2024 19:43:09 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/%E4%B8%AD%E9%97%B4%E4%BB%B6/docker/</guid>
      <description>常见命令 镜像命令 docker pull ：下载镜像 docker images：列出本地主机上的镜像 docker search httpd ：在docker hub上查找指定名称的镜像 docker rmi httpd：删除镜像 docker</description>
    </item>
    <item>
      <title>回溯中的去重问题</title>
      <link>https://iendi.github.io/en/posts/lc/%E5%9B%9E%E6%BA%AF/repeat/</link>
      <pubDate>Mon, 29 Apr 2024 20:48:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E5%9B%9E%E6%BA%AF/repeat/</guid>
      <description>子集2 给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的 子集 首先，子集问题 就是在回溯时对每个节点进行保存操作 与一般子集问题相</description>
    </item>
    <item>
      <title>Dijkstra算法</title>
      <link>https://iendi.github.io/en/posts/lc/%E5%9B%BE/1/</link>
      <pubDate>Sun, 14 Apr 2024 16:49:51 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E5%9B%BE/1/</guid>
      <description>首先是图的两种写法，给定int[][] edges //邻接表 //邻接矩阵 Dijkstra是单源最短路径，表示某个节点i到其他节点k的距离 743. 网络延迟时间</description>
    </item>
    <item>
      <title>0410每日一题</title>
      <link>https://iendi.github.io/en/posts/lc/%E8%B4%AA%E5%BF%83/0410/</link>
      <pubDate>Wed, 10 Apr 2024 21:02:08 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E8%B4%AA%E5%BF%83/0410/</guid>
      <description>1702. 修改后的最大二进制字符串 - 力扣（LeetCode） 给一个二进制字符串，可以做以下操作 操作1：把00-&amp;gt;10 操作2：把10-&amp;gt;0</description>
    </item>
    <item>
      <title>Java基础知识复习</title>
      <link>https://iendi.github.io/en/posts/tech/java--jvm/java_review/</link>
      <pubDate>Wed, 10 Apr 2024 17:45:05 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/java--jvm/java_review/</guid>
      <description>复习一下忘记的知识点。 引用传值 Java中都是传值的，但由于传递的是一份对象引用的拷贝进行传递的，但是原引用和拷贝的引用依旧指向的是堆中的同一</description>
    </item>
    <item>
      <title>位运算&amp;倍增</title>
      <link>https://iendi.github.io/en/posts/lc/%E5%85%B6%E4%BB%96/1/</link>
      <pubDate>Sun, 07 Apr 2024 16:23:11 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E5%85%B6%E4%BB%96/1/</guid>
      <description>1483. 树节点的第 K 个祖先 - 力扣（LeetCode） 给定n=7， 每个元素的祖先[-1,0,0,1,1,2,2] 对应树为： 要求给定元素n，求出其第k</description>
    </item>
    <item>
      <title>DDPM</title>
      <link>https://iendi.github.io/en/posts/ai/diffusion/</link>
      <pubDate>Sun, 29 Oct 2023 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/ai/diffusion/</guid>
      <description>整体架构 DDPM可分为以下两个部分 其中Denoise内部：输入图片+step，预测其噪声 为什么step也是一个重要的输入：从噪声到原图，所要</description>
    </item>
    <item>
      <title>ViT</title>
      <link>https://iendi.github.io/en/posts/ai/vit/</link>
      <pubDate>Thu, 06 Jul 2023 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/ai/vit/</guid>
      <description>整体结构 分为三个部分，Linear Projection of Flattened Patches(Embedding层)、Encoder和MLP Head分类头 下图是不同版本ViT的参</description>
    </item>
    <item>
      <title>Bert</title>
      <link>https://iendi.github.io/en/posts/ai/bert/</link>
      <pubDate>Wed, 05 Jul 2023 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/ai/bert/</guid>
      <description>BERT的全称为Bidirectional Encoder Representation from Transformers，主要针对Transformer的Encoder部分进行预训练，包括</description>
    </item>
    <item>
      <title>Transformer基础知识</title>
      <link>https://iendi.github.io/en/posts/ai/transformer/</link>
      <pubDate>Thu, 08 Jun 2023 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/ai/transformer/</guid>
      <description>Seq2Seq模型 定义 包括两个部分： 编码器：将一个变长、可变类型的输入序列编码成一个固定长度、定长的向量，该向量中包含了输入序列的所有信息 解</description>
    </item>
    <item>
      <title>Pyside6</title>
      <link>https://iendi.github.io/en/posts/ai/pyside6/</link>
      <pubDate>Wed, 17 May 2023 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/ai/pyside6/</guid>
      <description>利用pyside6对python程序进行快速上手开发，实现模型的部署，请先安装pyside6相关依赖： pip install pyside6 pip install qt-material Pyside6基础知识 窗口</description>
    </item>
    <item>
      <title>StringTable 一些特性</title>
      <link>https://iendi.github.io/en/posts/tech/java--jvm/stringtable-%E4%B8%80%E4%BA%9B%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 01 Jul 2022 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/java--jvm/stringtable-%E4%B8%80%E4%BA%9B%E7%89%B9%E6%80%A7/</guid>
      <description>StringTable为字符串常量池，是运行时常量池的一部分，一般放String字符串对象 + 运算符 两个 &amp;quot; &amp;quot; 相加 String s3=&amp;#34;ab&amp;#34;; //[&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;ab&amp;#34;] String s4=&amp;#34;a&amp;#34;+&amp;#34;b&amp;#34;; System.out.println(s3==s4);//true s4=&amp;quot;</description>
    </item>
    <item>
      <title>字节码</title>
      <link>https://iendi.github.io/en/posts/tech/java--jvm/%E5%AD%97%E8%8A%82%E7%A0%81/</link>
      <pubDate>Fri, 01 Jul 2022 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/java--jvm/%E5%AD%97%E8%8A%82%E7%A0%81/</guid>
      <description>便于理解字节码，程序如下： public class TextClass { String name; Integer age; public TextClass(String name, Integer age) { this.name = name; this.age = age; } public void show(){ System.out.println(&amp;#34;Hello MotherFucker&amp;#34;); } } 编译后，用javap -verbose TextClass.class反编译</description>
    </item>
    <item>
      <title>🙋🏻‍♂️关于</title>
      <link>https://iendi.github.io/en/about/</link>
      <pubDate>Sat, 06 Nov 2021 14:57:28 +0800</pubDate>
      <guid>https://iendi.github.io/en/about/</guid>
      <description>关于我 英文名: Kend 运动: 骑车</description>
    </item>
    <item>
      <title>05. 数据验证</title>
      <link>https://iendi.github.io/en/posts/tech/spring-mvc/05.-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Tue, 20 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring-mvc/05.-%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/</guid>
      <description>单个类验证 通过JSR-303 验证框架加Hibernate Validator机制进行验证 先引入依赖： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.1.0.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 然后在📃springmvc-se</description>
    </item>
    <item>
      <title>04. 文件上传与下载</title>
      <link>https://iendi.github.io/en/posts/tech/spring-mvc/04.-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</link>
      <pubDate>Mon, 19 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring-mvc/04.-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</guid>
      <description>文件上传 文件上传通过MultipartResolver接口，有两个实现类，分别为StandardServletMultipartResolv</description>
    </item>
    <item>
      <title>02. 控制器获取参数及返回</title>
      <link>https://iendi.github.io/en/posts/tech/spring-mvc/02.-%E6%8E%A7%E5%88%B6%E5%99%A8%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sun, 18 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring-mvc/02.-%E6%8E%A7%E5%88%B6%E5%99%A8%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0/</guid>
      <description>获取参数 1. 无注解下获取参数 无注解下，要求参数名与HTTP请求的参数名一致 @Controller public class MyController { @RequestMapping(&amp;#34;/hello&amp;#34;) @ResponseBody public Object sayHello(String name,Integer age,String str){ Map&amp;lt;String,Integer&amp;gt; map=new HashMap&amp;lt;&amp;gt;(); map.put(name,age); sout(str); return map; } 请求URL：http://</description>
    </item>
    <item>
      <title>03. 参数绑定</title>
      <link>https://iendi.github.io/en/posts/tech/spring-mvc/03.-%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Sun, 18 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring-mvc/03.-%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</guid>
      <description>对前端传来的参数，绑定至已有对象中 通过表单post数据，首先先在web.xml中加入filter，防止中文乱码 &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;encoding&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;UTF-8&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;forceRequestEncoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;forceResponseEncoding&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt;</description>
    </item>
    <item>
      <title>01. Spring MVC全流程及简单配置</title>
      <link>https://iendi.github.io/en/posts/tech/spring-mvc/01.-spring-mvc%E5%85%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 16 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring-mvc/01.-spring-mvc%E5%85%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</guid>
      <description>MVC 全流程 通过@RequestMapping注解，将控制器(Controller) 扫描进HandleMapping DispatcherServ</description>
    </item>
    <item>
      <title>滑动窗口</title>
      <link>https://iendi.github.io/en/posts/lc/%E5%85%B6%E4%BB%96/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</link>
      <pubDate>Thu, 15 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E5%85%B6%E4%BB%96/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</guid>
      <description>经典例题： 76. 最小覆盖子串 给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串</description>
    </item>
    <item>
      <title>单调栈</title>
      <link>https://iendi.github.io/en/posts/lc/%E5%8D%95%E8%B0%83%E6%A0%88/84/</link>
      <pubDate>Mon, 12 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/lc/%E5%8D%95%E8%B0%83%E6%A0%88/84/</guid>
      <description>解决 &amp;ldquo;next greater number&amp;rdquo; 问题 496. 下一个更大元素 I 给你两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。 请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。 nums1</description>
    </item>
    <item>
      <title>AOP</title>
      <link>https://iendi.github.io/en/posts/tech/spring/aop/</link>
      <pubDate>Fri, 09 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring/aop/</guid>
      <description>切面 Spring 中的 Aop 的通知类型有 5 种： 前置通知 后置通知 异常通知 返回通知 环绕通知 首先，在项目中，引入 Spring 依赖（引入 Aop 相关的依赖）： &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.9.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;</description>
    </item>
    <item>
      <title>代理模式</title>
      <link>https://iendi.github.io/en/posts/tech/spring/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 09 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description>静态代理 代理类+被代理类+公共接口 公共接口 public interface Person { //上交班费 void giveMoney(); } 被代理类 //实现公共接口，并重写方法 public class Student implements Person { private String name; public Student(String name) { this.name = name; } @Override</description>
    </item>
    <item>
      <title>Bean 的生命周期</title>
      <link>https://iendi.github.io/en/posts/tech/spring/bean-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link>
      <pubDate>Wed, 07 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring/bean-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid>
      <description>Bean的生命周期主要可分为4个部分： Bean的定义：通过配置查找Bean，并将Bean定义发布到IoC容器中，此时只有定义==没有实例==</description>
    </item>
    <item>
      <title>IOC</title>
      <link>https://iendi.github.io/en/posts/tech/spring/ioc/</link>
      <pubDate>Wed, 07 Jul 2021 22:20:58 +0800</pubDate>
      <guid>https://iendi.github.io/en/posts/tech/spring/ioc/</guid>
      <description>将对象的创建、初始化、销毁等操作交给 Spring 容器来管理 本文以Student 类为例，定义如下： public class Student { public String name; public Integer number; public boolean sex; //..constructor,getter and setter } 一. 创建一个简单的I</description>
    </item>
  </channel>
</rss>
